// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"github.com/gofiber/fiber/v2"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// BaseResponse defines model for BaseResponse.
type BaseResponse struct {
	// Data Dynamic payload
	Data          interface{} `json:"data"`
	Error         *ErrorLog   `json:"error,omitempty"`
	StatusMessage string      `json:"status_message"`
	TotalData     int         `json:"total_data"`
	Url           string      `json:"url"`
}

// ErrorLog defines model for ErrorLog.
type ErrorLog struct {
	// Filename Filename where the error occurred
	Filename string `json:"filename"`

	// Function Function name where the error occurred
	Function string `json:"function"`

	// Line Line where the error occurred
	Line string `json:"line"`

	// Message User-facing error message
	Message string `json:"message"`

	// SystemMessage Internal or system-level error details
	SystemMessage string `json:"system_message"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    *openapi_types.Email `json:"email,omitempty"`
	Password string               `json:"password"`
	Username *string              `json:"username,omitempty"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
	Username string              `json:"username"`
}

// ErrorBadRequest defines model for ErrorBadRequest.
type ErrorBadRequest = BaseResponse

// ErrorInternalServerError defines model for ErrorInternalServerError.
type ErrorInternalServerError = BaseResponse

// ErrorNotFound defines model for ErrorNotFound.
type ErrorNotFound = BaseResponse

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// PostAuthRegisterJSONRequestBody defines body for PostAuthRegister for application/json ContentType.
type PostAuthRegisterJSONRequestBody = RegisterRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// User Login
	// (POST /auth/login)
	Login(c *fiber.Ctx) error
	// Refresh Access Token
	// (POST /auth/refresh-token)
	RefreshToken(c *fiber.Ctx) error
	// Register new User
	// (POST /auth/register)
	PostAuthRegister(c *fiber.Ctx) error
	// Health check
	// (GET /ping)
	Ping(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *fiber.Ctx) error {

	return siw.Handler.Login(c)
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(c *fiber.Ctx) error {

	return siw.Handler.RefreshToken(c)
}

// PostAuthRegister operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRegister(c *fiber.Ctx) error {

	return siw.Handler.PostAuthRegister(c)
}

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(c *fiber.Ctx) error {

	return siw.Handler.Ping(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/auth/login", wrapper.Login)

	router.Post(options.BaseURL+"/auth/refresh-token", wrapper.RefreshToken)

	router.Post(options.BaseURL+"/auth/register", wrapper.PostAuthRegister)

	router.Get(options.BaseURL+"/ping", wrapper.Ping)

}
