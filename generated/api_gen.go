// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"github.com/gofiber/fiber/v2"
)

// BaseResponse defines model for BaseResponse.
type BaseResponse struct {
	// Data Dynamic payload
	Data          interface{} `json:"data"`
	Error         *ErrorLog   `json:"error,omitempty"`
	StatusMessage string      `json:"status_message"`
	TotalData     int         `json:"total_data"`
	Url           string      `json:"url"`
}

// ErrorLog defines model for ErrorLog.
type ErrorLog struct {
	// Filename Filename where the error occurred
	Filename string `json:"filename"`

	// Function Function name where the error occurred
	Function string `json:"function"`

	// Line Line where the error occurred
	Line string `json:"line"`

	// Message User-facing error message
	Message string `json:"message"`

	// SystemMessage Internal or system-level error details
	SystemMessage string `json:"system_message"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /ping)
	Ping(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(c *fiber.Ctx) error {

	return siw.Handler.Ping(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/ping", wrapper.Ping)

}
