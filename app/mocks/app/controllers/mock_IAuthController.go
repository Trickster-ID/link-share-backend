// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	fiber "github.com/gofiber/fiber/v3"
	mock "github.com/stretchr/testify/mock"
)

// MockIAuthController is an autogenerated mock type for the IAuthController type
type MockIAuthController struct {
	mock.Mock
}

type MockIAuthController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAuthController) EXPECT() *MockIAuthController_Expecter {
	return &MockIAuthController_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: f
func (_m *MockIAuthController) Login(f fiber.Ctx) error {
	ret := _m.Called(f)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(fiber.Ctx) error); ok {
		r0 = rf(f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAuthController_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockIAuthController_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - f fiber.Ctx
func (_e *MockIAuthController_Expecter) Login(f interface{}) *MockIAuthController_Login_Call {
	return &MockIAuthController_Login_Call{Call: _e.mock.On("Login", f)}
}

func (_c *MockIAuthController_Login_Call) Run(run func(f fiber.Ctx)) *MockIAuthController_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(fiber.Ctx))
	})
	return _c
}

func (_c *MockIAuthController_Login_Call) Return(_a0 error) *MockIAuthController_Login_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAuthController_Login_Call) RunAndReturn(run func(fiber.Ctx) error) *MockIAuthController_Login_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: f
func (_m *MockIAuthController) RefreshToken(f fiber.Ctx) error {
	ret := _m.Called(f)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(fiber.Ctx) error); ok {
		r0 = rf(f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAuthController_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockIAuthController_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - f fiber.Ctx
func (_e *MockIAuthController_Expecter) RefreshToken(f interface{}) *MockIAuthController_RefreshToken_Call {
	return &MockIAuthController_RefreshToken_Call{Call: _e.mock.On("RefreshToken", f)}
}

func (_c *MockIAuthController_RefreshToken_Call) Run(run func(f fiber.Ctx)) *MockIAuthController_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(fiber.Ctx))
	})
	return _c
}

func (_c *MockIAuthController_RefreshToken_Call) Return(_a0 error) *MockIAuthController_RefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAuthController_RefreshToken_Call) RunAndReturn(run func(fiber.Ctx) error) *MockIAuthController_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAuthController creates a new instance of MockIAuthController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAuthController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAuthController {
	mock := &MockIAuthController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
