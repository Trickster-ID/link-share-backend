// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "linkshare/app/dto"

	mock "github.com/stretchr/testify/mock"

	model "linkshare/app/global/model"

	models "linkshare/app/models"
)

// MockIAuthUseCase is an autogenerated mock type for the IAuthUseCase type
type MockIAuthUseCase struct {
	mock.Mock
}

type MockIAuthUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAuthUseCase) EXPECT() *MockIAuthUseCase_Expecter {
	return &MockIAuthUseCase_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: req, ctx
func (_m *MockIAuthUseCase) Login(req *dto.LoginRequest, ctx context.Context) (*dto.LoginResponse, *model.ErrorLog) {
	ret := _m.Called(req, ctx)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *dto.LoginResponse
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*dto.LoginRequest, context.Context) (*dto.LoginResponse, *model.ErrorLog)); ok {
		return rf(req, ctx)
	}
	if rf, ok := ret.Get(0).(func(*dto.LoginRequest, context.Context) *dto.LoginResponse); ok {
		r0 = rf(req, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*dto.LoginRequest, context.Context) *model.ErrorLog); ok {
		r1 = rf(req, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// MockIAuthUseCase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockIAuthUseCase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - req *dto.LoginRequest
//   - ctx context.Context
func (_e *MockIAuthUseCase_Expecter) Login(req interface{}, ctx interface{}) *MockIAuthUseCase_Login_Call {
	return &MockIAuthUseCase_Login_Call{Call: _e.mock.On("Login", req, ctx)}
}

func (_c *MockIAuthUseCase_Login_Call) Run(run func(req *dto.LoginRequest, ctx context.Context)) *MockIAuthUseCase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.LoginRequest), args[1].(context.Context))
	})
	return _c
}

func (_c *MockIAuthUseCase_Login_Call) Return(_a0 *dto.LoginResponse, _a1 *model.ErrorLog) *MockIAuthUseCase_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthUseCase_Login_Call) RunAndReturn(run func(*dto.LoginRequest, context.Context) (*dto.LoginResponse, *model.ErrorLog)) *MockIAuthUseCase_Login_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: req, ctx
func (_m *MockIAuthUseCase) RefreshToken(req *dto.RefreshTokenRequest, ctx context.Context) (*dto.LoginResponse, *model.ErrorLog) {
	ret := _m.Called(req, ctx)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *dto.LoginResponse
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*dto.RefreshTokenRequest, context.Context) (*dto.LoginResponse, *model.ErrorLog)); ok {
		return rf(req, ctx)
	}
	if rf, ok := ret.Get(0).(func(*dto.RefreshTokenRequest, context.Context) *dto.LoginResponse); ok {
		r0 = rf(req, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*dto.RefreshTokenRequest, context.Context) *model.ErrorLog); ok {
		r1 = rf(req, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// MockIAuthUseCase_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockIAuthUseCase_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - req *dto.RefreshTokenRequest
//   - ctx context.Context
func (_e *MockIAuthUseCase_Expecter) RefreshToken(req interface{}, ctx interface{}) *MockIAuthUseCase_RefreshToken_Call {
	return &MockIAuthUseCase_RefreshToken_Call{Call: _e.mock.On("RefreshToken", req, ctx)}
}

func (_c *MockIAuthUseCase_RefreshToken_Call) Run(run func(req *dto.RefreshTokenRequest, ctx context.Context)) *MockIAuthUseCase_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.RefreshTokenRequest), args[1].(context.Context))
	})
	return _c
}

func (_c *MockIAuthUseCase_RefreshToken_Call) Return(_a0 *dto.LoginResponse, _a1 *model.ErrorLog) *MockIAuthUseCase_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthUseCase_RefreshToken_Call) RunAndReturn(run func(*dto.RefreshTokenRequest, context.Context) (*dto.LoginResponse, *model.ErrorLog)) *MockIAuthUseCase_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateUser provides a mock function with given fields: users, ctx
func (_m *MockIAuthUseCase) ValidateUser(users *dto.LoginRequest, ctx context.Context) (*models.Users, *model.ErrorLog) {
	ret := _m.Called(users, ctx)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUser")
	}

	var r0 *models.Users
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*dto.LoginRequest, context.Context) (*models.Users, *model.ErrorLog)); ok {
		return rf(users, ctx)
	}
	if rf, ok := ret.Get(0).(func(*dto.LoginRequest, context.Context) *models.Users); ok {
		r0 = rf(users, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(*dto.LoginRequest, context.Context) *model.ErrorLog); ok {
		r1 = rf(users, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// MockIAuthUseCase_ValidateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateUser'
type MockIAuthUseCase_ValidateUser_Call struct {
	*mock.Call
}

// ValidateUser is a helper method to define mock.On call
//   - users *dto.LoginRequest
//   - ctx context.Context
func (_e *MockIAuthUseCase_Expecter) ValidateUser(users interface{}, ctx interface{}) *MockIAuthUseCase_ValidateUser_Call {
	return &MockIAuthUseCase_ValidateUser_Call{Call: _e.mock.On("ValidateUser", users, ctx)}
}

func (_c *MockIAuthUseCase_ValidateUser_Call) Run(run func(users *dto.LoginRequest, ctx context.Context)) *MockIAuthUseCase_ValidateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.LoginRequest), args[1].(context.Context))
	})
	return _c
}

func (_c *MockIAuthUseCase_ValidateUser_Call) Return(_a0 *models.Users, _a1 *model.ErrorLog) *MockIAuthUseCase_ValidateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthUseCase_ValidateUser_Call) RunAndReturn(run func(*dto.LoginRequest, context.Context) (*models.Users, *model.ErrorLog)) *MockIAuthUseCase_ValidateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAuthUseCase creates a new instance of MockIAuthUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAuthUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAuthUseCase {
	mock := &MockIAuthUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
