// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	model "linkshare/app/global/model"

	mock "github.com/stretchr/testify/mock"

	models "linkshare/app/models"
)

// MockIRefreshTokenSessionsRepository is an autogenerated mock type for the IRefreshTokenSessionsRepository type
type MockIRefreshTokenSessionsRepository struct {
	mock.Mock
}

type MockIRefreshTokenSessionsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRefreshTokenSessionsRepository) EXPECT() *MockIRefreshTokenSessionsRepository_Expecter {
	return &MockIRefreshTokenSessionsRepository_Expecter{mock: &_m.Mock}
}

// GetByRefreshToken provides a mock function with given fields: refreshToken, ctx
func (_m *MockIRefreshTokenSessionsRepository) GetByRefreshToken(refreshToken string, ctx context.Context) (*models.RefreshTokenSession, *model.ErrorLog) {
	ret := _m.Called(refreshToken, ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetByRefreshToken")
	}

	var r0 *models.RefreshTokenSession
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(string, context.Context) (*models.RefreshTokenSession, *model.ErrorLog)); ok {
		return rf(refreshToken, ctx)
	}
	if rf, ok := ret.Get(0).(func(string, context.Context) *models.RefreshTokenSession); ok {
		r0 = rf(refreshToken, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RefreshTokenSession)
		}
	}

	if rf, ok := ret.Get(1).(func(string, context.Context) *model.ErrorLog); ok {
		r1 = rf(refreshToken, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// MockIRefreshTokenSessionsRepository_GetByRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByRefreshToken'
type MockIRefreshTokenSessionsRepository_GetByRefreshToken_Call struct {
	*mock.Call
}

// GetByRefreshToken is a helper method to define mock.On call
//   - refreshToken string
//   - ctx context.Context
func (_e *MockIRefreshTokenSessionsRepository_Expecter) GetByRefreshToken(refreshToken interface{}, ctx interface{}) *MockIRefreshTokenSessionsRepository_GetByRefreshToken_Call {
	return &MockIRefreshTokenSessionsRepository_GetByRefreshToken_Call{Call: _e.mock.On("GetByRefreshToken", refreshToken, ctx)}
}

func (_c *MockIRefreshTokenSessionsRepository_GetByRefreshToken_Call) Run(run func(refreshToken string, ctx context.Context)) *MockIRefreshTokenSessionsRepository_GetByRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(context.Context))
	})
	return _c
}

func (_c *MockIRefreshTokenSessionsRepository_GetByRefreshToken_Call) Return(_a0 *models.RefreshTokenSession, _a1 *model.ErrorLog) *MockIRefreshTokenSessionsRepository_GetByRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRefreshTokenSessionsRepository_GetByRefreshToken_Call) RunAndReturn(run func(string, context.Context) (*models.RefreshTokenSession, *model.ErrorLog)) *MockIRefreshTokenSessionsRepository_GetByRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: request, ctx
func (_m *MockIRefreshTokenSessionsRepository) Insert(request *models.RefreshTokenSession, ctx context.Context) {
	_m.Called(request, ctx)
}

// MockIRefreshTokenSessionsRepository_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockIRefreshTokenSessionsRepository_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - request *models.RefreshTokenSession
//   - ctx context.Context
func (_e *MockIRefreshTokenSessionsRepository_Expecter) Insert(request interface{}, ctx interface{}) *MockIRefreshTokenSessionsRepository_Insert_Call {
	return &MockIRefreshTokenSessionsRepository_Insert_Call{Call: _e.mock.On("Insert", request, ctx)}
}

func (_c *MockIRefreshTokenSessionsRepository_Insert_Call) Run(run func(request *models.RefreshTokenSession, ctx context.Context)) *MockIRefreshTokenSessionsRepository_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.RefreshTokenSession), args[1].(context.Context))
	})
	return _c
}

func (_c *MockIRefreshTokenSessionsRepository_Insert_Call) Return() *MockIRefreshTokenSessionsRepository_Insert_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIRefreshTokenSessionsRepository_Insert_Call) RunAndReturn(run func(*models.RefreshTokenSession, context.Context)) *MockIRefreshTokenSessionsRepository_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIRefreshTokenSessionsRepository creates a new instance of MockIRefreshTokenSessionsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRefreshTokenSessionsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRefreshTokenSessionsRepository {
	mock := &MockIRefreshTokenSessionsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
