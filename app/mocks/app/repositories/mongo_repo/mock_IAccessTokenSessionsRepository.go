// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	model "linkshare/app/global/model"

	mock "github.com/stretchr/testify/mock"

	models "linkshare/app/models"
)

// MockIAccessTokenSessionsRepository is an autogenerated mock type for the IAccessTokenSessionsRepository type
type MockIAccessTokenSessionsRepository struct {
	mock.Mock
}

type MockIAccessTokenSessionsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAccessTokenSessionsRepository) EXPECT() *MockIAccessTokenSessionsRepository_Expecter {
	return &MockIAccessTokenSessionsRepository_Expecter{mock: &_m.Mock}
}

// GetByAccessToken provides a mock function with given fields: accessToken, ctx
func (_m *MockIAccessTokenSessionsRepository) GetByAccessToken(accessToken string, ctx context.Context) (*models.AccessTokenSession, *model.ErrorLog) {
	ret := _m.Called(accessToken, ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetByAccessToken")
	}

	var r0 *models.AccessTokenSession
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(string, context.Context) (*models.AccessTokenSession, *model.ErrorLog)); ok {
		return rf(accessToken, ctx)
	}
	if rf, ok := ret.Get(0).(func(string, context.Context) *models.AccessTokenSession); ok {
		r0 = rf(accessToken, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AccessTokenSession)
		}
	}

	if rf, ok := ret.Get(1).(func(string, context.Context) *model.ErrorLog); ok {
		r1 = rf(accessToken, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// MockIAccessTokenSessionsRepository_GetByAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByAccessToken'
type MockIAccessTokenSessionsRepository_GetByAccessToken_Call struct {
	*mock.Call
}

// GetByAccessToken is a helper method to define mock.On call
//   - accessToken string
//   - ctx context.Context
func (_e *MockIAccessTokenSessionsRepository_Expecter) GetByAccessToken(accessToken interface{}, ctx interface{}) *MockIAccessTokenSessionsRepository_GetByAccessToken_Call {
	return &MockIAccessTokenSessionsRepository_GetByAccessToken_Call{Call: _e.mock.On("GetByAccessToken", accessToken, ctx)}
}

func (_c *MockIAccessTokenSessionsRepository_GetByAccessToken_Call) Run(run func(accessToken string, ctx context.Context)) *MockIAccessTokenSessionsRepository_GetByAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(context.Context))
	})
	return _c
}

func (_c *MockIAccessTokenSessionsRepository_GetByAccessToken_Call) Return(_a0 *models.AccessTokenSession, _a1 *model.ErrorLog) *MockIAccessTokenSessionsRepository_GetByAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAccessTokenSessionsRepository_GetByAccessToken_Call) RunAndReturn(run func(string, context.Context) (*models.AccessTokenSession, *model.ErrorLog)) *MockIAccessTokenSessionsRepository_GetByAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: request, ctx
func (_m *MockIAccessTokenSessionsRepository) Insert(request *models.AccessTokenSession, ctx context.Context) {
	_m.Called(request, ctx)
}

// MockIAccessTokenSessionsRepository_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockIAccessTokenSessionsRepository_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - request *models.AccessTokenSession
//   - ctx context.Context
func (_e *MockIAccessTokenSessionsRepository_Expecter) Insert(request interface{}, ctx interface{}) *MockIAccessTokenSessionsRepository_Insert_Call {
	return &MockIAccessTokenSessionsRepository_Insert_Call{Call: _e.mock.On("Insert", request, ctx)}
}

func (_c *MockIAccessTokenSessionsRepository_Insert_Call) Run(run func(request *models.AccessTokenSession, ctx context.Context)) *MockIAccessTokenSessionsRepository_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.AccessTokenSession), args[1].(context.Context))
	})
	return _c
}

func (_c *MockIAccessTokenSessionsRepository_Insert_Call) Return() *MockIAccessTokenSessionsRepository_Insert_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIAccessTokenSessionsRepository_Insert_Call) RunAndReturn(run func(*models.AccessTokenSession, context.Context)) *MockIAccessTokenSessionsRepository_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAccessTokenSessionsRepository creates a new instance of MockIAccessTokenSessionsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAccessTokenSessionsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAccessTokenSessionsRepository {
	mock := &MockIAccessTokenSessionsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
