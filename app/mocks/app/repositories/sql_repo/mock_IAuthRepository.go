// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"
	model "linkshare/app/global/model"

	mock "github.com/stretchr/testify/mock"

	models "linkshare/app/models"
)

// MockIAuthRepository is an autogenerated mock type for the IAuthRepository type
type MockIAuthRepository struct {
	mock.Mock
}

type MockIAuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAuthRepository) EXPECT() *MockIAuthRepository_Expecter {
	return &MockIAuthRepository_Expecter{mock: &_m.Mock}
}

// GetUserByUsernameOrEmail provides a mock function with given fields: username, email, ctx
func (_m *MockIAuthRepository) GetUserByUsernameOrEmail(username string, email string, ctx context.Context) (*models.Users, *model.ErrorLog) {
	ret := _m.Called(username, email, ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsernameOrEmail")
	}

	var r0 *models.Users
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(string, string, context.Context) (*models.Users, *model.ErrorLog)); ok {
		return rf(username, email, ctx)
	}
	if rf, ok := ret.Get(0).(func(string, string, context.Context) *models.Users); ok {
		r0 = rf(username, email, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, context.Context) *model.ErrorLog); ok {
		r1 = rf(username, email, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// MockIAuthRepository_GetUserByUsernameOrEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsernameOrEmail'
type MockIAuthRepository_GetUserByUsernameOrEmail_Call struct {
	*mock.Call
}

// GetUserByUsernameOrEmail is a helper method to define mock.On call
//   - username string
//   - email string
//   - ctx context.Context
func (_e *MockIAuthRepository_Expecter) GetUserByUsernameOrEmail(username interface{}, email interface{}, ctx interface{}) *MockIAuthRepository_GetUserByUsernameOrEmail_Call {
	return &MockIAuthRepository_GetUserByUsernameOrEmail_Call{Call: _e.mock.On("GetUserByUsernameOrEmail", username, email, ctx)}
}

func (_c *MockIAuthRepository_GetUserByUsernameOrEmail_Call) Run(run func(username string, email string, ctx context.Context)) *MockIAuthRepository_GetUserByUsernameOrEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(context.Context))
	})
	return _c
}

func (_c *MockIAuthRepository_GetUserByUsernameOrEmail_Call) Return(_a0 *models.Users, _a1 *model.ErrorLog) *MockIAuthRepository_GetUserByUsernameOrEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthRepository_GetUserByUsernameOrEmail_Call) RunAndReturn(run func(string, string, context.Context) (*models.Users, *model.ErrorLog)) *MockIAuthRepository_GetUserByUsernameOrEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAuthRepository creates a new instance of MockIAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAuthRepository {
	mock := &MockIAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
