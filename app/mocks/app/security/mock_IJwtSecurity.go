// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	dto "linkshare/app/dto"
	models "linkshare/app/models"

	mock "github.com/stretchr/testify/mock"
)

// MockIJwtSecurity is an autogenerated mock type for the IJwtSecurity type
type MockIJwtSecurity struct {
	mock.Mock
}

type MockIJwtSecurity_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIJwtSecurity) EXPECT() *MockIJwtSecurity_Expecter {
	return &MockIJwtSecurity_Expecter{mock: &_m.Mock}
}

// GenerateAccessToken provides a mock function with given fields: userData
func (_m *MockIJwtSecurity) GenerateAccessToken(userData *models.UserDataOnJWT) (*dto.GenerateAccessTokenResponse, error) {
	ret := _m.Called(userData)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAccessToken")
	}

	var r0 *dto.GenerateAccessTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.UserDataOnJWT) (*dto.GenerateAccessTokenResponse, error)); ok {
		return rf(userData)
	}
	if rf, ok := ret.Get(0).(func(*models.UserDataOnJWT) *dto.GenerateAccessTokenResponse); ok {
		r0 = rf(userData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GenerateAccessTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.UserDataOnJWT) error); ok {
		r1 = rf(userData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIJwtSecurity_GenerateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAccessToken'
type MockIJwtSecurity_GenerateAccessToken_Call struct {
	*mock.Call
}

// GenerateAccessToken is a helper method to define mock.On call
//   - userData *models.UserDataOnJWT
func (_e *MockIJwtSecurity_Expecter) GenerateAccessToken(userData interface{}) *MockIJwtSecurity_GenerateAccessToken_Call {
	return &MockIJwtSecurity_GenerateAccessToken_Call{Call: _e.mock.On("GenerateAccessToken", userData)}
}

func (_c *MockIJwtSecurity_GenerateAccessToken_Call) Run(run func(userData *models.UserDataOnJWT)) *MockIJwtSecurity_GenerateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.UserDataOnJWT))
	})
	return _c
}

func (_c *MockIJwtSecurity_GenerateAccessToken_Call) Return(_a0 *dto.GenerateAccessTokenResponse, _a1 error) *MockIJwtSecurity_GenerateAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIJwtSecurity_GenerateAccessToken_Call) RunAndReturn(run func(*models.UserDataOnJWT) (*dto.GenerateAccessTokenResponse, error)) *MockIJwtSecurity_GenerateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateToken provides a mock function with given fields: userData
func (_m *MockIJwtSecurity) GenerateToken(userData *models.UserDataOnJWT) (*dto.GenerateTokenResponse, error) {
	ret := _m.Called(userData)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 *dto.GenerateTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.UserDataOnJWT) (*dto.GenerateTokenResponse, error)); ok {
		return rf(userData)
	}
	if rf, ok := ret.Get(0).(func(*models.UserDataOnJWT) *dto.GenerateTokenResponse); ok {
		r0 = rf(userData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GenerateTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.UserDataOnJWT) error); ok {
		r1 = rf(userData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIJwtSecurity_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockIJwtSecurity_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - userData *models.UserDataOnJWT
func (_e *MockIJwtSecurity_Expecter) GenerateToken(userData interface{}) *MockIJwtSecurity_GenerateToken_Call {
	return &MockIJwtSecurity_GenerateToken_Call{Call: _e.mock.On("GenerateToken", userData)}
}

func (_c *MockIJwtSecurity_GenerateToken_Call) Run(run func(userData *models.UserDataOnJWT)) *MockIJwtSecurity_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.UserDataOnJWT))
	})
	return _c
}

func (_c *MockIJwtSecurity_GenerateToken_Call) Return(_a0 *dto.GenerateTokenResponse, _a1 error) *MockIJwtSecurity_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIJwtSecurity_GenerateToken_Call) RunAndReturn(run func(*models.UserDataOnJWT) (*dto.GenerateTokenResponse, error)) *MockIJwtSecurity_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: refreshToken
func (_m *MockIJwtSecurity) RefreshToken(refreshToken string) (string, error) {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(refreshToken)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(refreshToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIJwtSecurity_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockIJwtSecurity_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - refreshToken string
func (_e *MockIJwtSecurity_Expecter) RefreshToken(refreshToken interface{}) *MockIJwtSecurity_RefreshToken_Call {
	return &MockIJwtSecurity_RefreshToken_Call{Call: _e.mock.On("RefreshToken", refreshToken)}
}

func (_c *MockIJwtSecurity_RefreshToken_Call) Run(run func(refreshToken string)) *MockIJwtSecurity_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIJwtSecurity_RefreshToken_Call) Return(_a0 string, _a1 error) *MockIJwtSecurity_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIJwtSecurity_RefreshToken_Call) RunAndReturn(run func(string) (string, error)) *MockIJwtSecurity_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateAccessToken provides a mock function with given fields: accessToken
func (_m *MockIJwtSecurity) ValidateAccessToken(accessToken string) *dto.ValidateTokenResponse {
	ret := _m.Called(accessToken)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAccessToken")
	}

	var r0 *dto.ValidateTokenResponse
	if rf, ok := ret.Get(0).(func(string) *dto.ValidateTokenResponse); ok {
		r0 = rf(accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ValidateTokenResponse)
		}
	}

	return r0
}

// MockIJwtSecurity_ValidateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateAccessToken'
type MockIJwtSecurity_ValidateAccessToken_Call struct {
	*mock.Call
}

// ValidateAccessToken is a helper method to define mock.On call
//   - accessToken string
func (_e *MockIJwtSecurity_Expecter) ValidateAccessToken(accessToken interface{}) *MockIJwtSecurity_ValidateAccessToken_Call {
	return &MockIJwtSecurity_ValidateAccessToken_Call{Call: _e.mock.On("ValidateAccessToken", accessToken)}
}

func (_c *MockIJwtSecurity_ValidateAccessToken_Call) Run(run func(accessToken string)) *MockIJwtSecurity_ValidateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIJwtSecurity_ValidateAccessToken_Call) Return(_a0 *dto.ValidateTokenResponse) *MockIJwtSecurity_ValidateAccessToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIJwtSecurity_ValidateAccessToken_Call) RunAndReturn(run func(string) *dto.ValidateTokenResponse) *MockIJwtSecurity_ValidateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateRefreshToken provides a mock function with given fields: refreshToken
func (_m *MockIJwtSecurity) ValidateRefreshToken(refreshToken string) *dto.ValidateTokenResponse {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRefreshToken")
	}

	var r0 *dto.ValidateTokenResponse
	if rf, ok := ret.Get(0).(func(string) *dto.ValidateTokenResponse); ok {
		r0 = rf(refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ValidateTokenResponse)
		}
	}

	return r0
}

// MockIJwtSecurity_ValidateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRefreshToken'
type MockIJwtSecurity_ValidateRefreshToken_Call struct {
	*mock.Call
}

// ValidateRefreshToken is a helper method to define mock.On call
//   - refreshToken string
func (_e *MockIJwtSecurity_Expecter) ValidateRefreshToken(refreshToken interface{}) *MockIJwtSecurity_ValidateRefreshToken_Call {
	return &MockIJwtSecurity_ValidateRefreshToken_Call{Call: _e.mock.On("ValidateRefreshToken", refreshToken)}
}

func (_c *MockIJwtSecurity_ValidateRefreshToken_Call) Run(run func(refreshToken string)) *MockIJwtSecurity_ValidateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIJwtSecurity_ValidateRefreshToken_Call) Return(_a0 *dto.ValidateTokenResponse) *MockIJwtSecurity_ValidateRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIJwtSecurity_ValidateRefreshToken_Call) RunAndReturn(run func(string) *dto.ValidateTokenResponse) *MockIJwtSecurity_ValidateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIJwtSecurity creates a new instance of MockIJwtSecurity. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIJwtSecurity(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIJwtSecurity {
	mock := &MockIJwtSecurity{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
